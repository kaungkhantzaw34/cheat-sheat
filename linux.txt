CLI 💭️

Code!❗️

	cd / cd ~		=>	goes to home
	cd ..			=>	quit from current path
	cd ../..		=>	quit 2 directory
	clear			=>	clear terminal
	pwd				=> 	show current directory
	ls				=>	show files and folders in current directory
	ls -a			=>	do not ignore entries starting with .
	ls -la			=>	show the details information of files and folders and not ignore entries starting with . (-l + -a)
	ls -l			=>	show the details information of files and folders (use a long listing format)
	ls -t 			=>	sort by modification time, newest first
	ls --help		=>	show help file of ls command
	man ls			=>	the manual of ls command
	tocuh [file.txt]	=>	create file 
	rm [file.text]		=>	remove file
	rm *				=>	remove all files
	mkdir [folder]		=>	create directory(folder)
	rmdir [folder]		=>	remove directory
	rm -r [folder]		=>	remove directory
	mv [file] [folder]	=>	move file to destination folder
	cp [file] [folder]	=>	copy file to destination folder
	vim [text_file]	=>	entering text to a text_file / press [i] to edit / enter anything u want when u done press [Esc key] / :wq (or) :x /
	cat [text_file]	=>	reading text_file
	more [text_file]	=>	reading text_file
	head [text_file]	=>	reading the head of text_file
	head -n 10 [text_file]	=>	reading the first 10 liines of text_file
	head --lines 10 [text_file]	=>	reading the first 10 lines of text_file
	tail [text_file]	=>	reading the tail of text_file
	tail -n 10 [text_file]	=>	reading the first 10 lines of text_file
	tail --lines 10 [text_file]	=>	reading the last 10 lines of text_file
	tail -f [text_file]	=>	reading the live editing from server
	free -m 		=> check available memory in linux (both debian and redhat)

file permission💭️

	-rw-(user) rw-(group) r--(other users)

	0 - no permission
	1 - x (execute)
	2 - w (write)
	3 - wx (write+execute)
	4 - r (read)
	5 - rx (read+execute)
	6 - rw (read+write)
	7 - rwx (read+write+execute)

	sudo chmod -R 777	=> sudo command(run as admin)

	-rw-rw-r--(before changing file permission)
		
	-rwxrwxrwx (after changing file permission)

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Road to linux Master💭️

/*
	command [option] [argument]
	wc(command)  -c(option) ~/Desktop/MK/mynotes(argument)

	1. The interpreter that executes commands typed as strings	(shell)
	2. The visual cue that indicates an interactive shell is waiting for the user to type a command	(prompt)
	3. The name of a program to run	(command)
	4. The part of the command line that adjust the behavior of a command	(option)
	5. The part of the command line that specifies the target that the command should operate on.	(argument)
	6. The hardware display and keyboard used to interact with a system	(physical console)
	7. One of multiple consoles that can each support an independent login session.
	8. An interface that provides a display for output and keyboard for input to a shell session
*/

Code!❗️

	ctrl+alt+up arrow/down arrow		=>	change wordspace
	crtl+alt+del				=> 	log out
	ctrl+a					=>	jump to the beginning of the command line
	ctrl+e					=>	jump to the end of the command line
	ctrl+u					=> 	clear the entire command from the end of the command line
	ctrl+k					=>	clear from start cursor to the end of the command line
	ctrl+left/right			=>	move the each word over command

	passwd					=>	change password
	su - 					=> 	sudo 
	file					=>	show the file type

	history				=>	show the commands that you type
	!head(after history)			=>	re-execute the recent command by matching the command name  
	!291(after history)			=>	run the command (clear) that has id 291
	 
	wc mynotes				=>	show the [line] [word] [character] in mynotes
	wc -l mynotes				=>	show the number of lines in mynotes
	wc -w mynotes				=>	show the number of words in mynotes
	wc -c mynotes				=> 	show the number of characters in mynotes

	cd Desktop/MK/;ls			=>	enter MK directory and show the files and folders
	cd ../cd notes/;ls -la			=>	back to Desktop then enter notes and then show the details of files and folders

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

file management with CLI💭️

Code!❗️

	ls -R					=>	show the sub directory and files
	cd -					=>	goes back to previous directory
	touch file1 file2 			=> 	creating files
	cp file1 file2 Desktop/MK/my_files	=>	copying two files to my_files folder(u can copy more than one file at a time)
	rm *					=>	deleting all files in my_files folder
	rmdir [folder_name]			=>	delete only if the file is empty (cannot delete if file has something)
	rm [folder_name]			=>	delete only if the file is empty (cannot delete if file has something)
	rm -r [folder_name]			=>	delete directories and their contents recursively (tho file is not empty)
	ls D*					=>	show the lists of folders that start with "D"
	ls *D					=>	show the lists of folders that end with "D"
	ls ?????????				=>	? means the amount of character.It means show the folder that has 9 characters.eg.(Downloads)
	touch note{1,2,3,4,5}.txt		=>	creating note file1,2,3,4,5 using {}
	touch note{1..5}.txt			=>	creating note file (1 to 5)
	rm note{1..5}.txt			=>	deleting note file (1 to 5)	
	echo My name is Kaung Khant Zaw	=>	print the name in console
	echo Today is `date +%F`		=>	if u want to use other commands in echo,use ``
	name="kaungkhantzaw"; echo $name	=>	Space must not have between name and = sign.Print tha name in console.
	host=$(hostname -s); echo $host	=>	print the host	


⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Reading Help💭️

/*
	Manual sessions💭️

	1. user commands
	2. System call
	3. library function
	4. Special files
	5. file formats
	6. Game
	7. Conventions
	8. System Administration
	9. Linux Kernal api
*/

Code!❗️

	gedit text_file			=>	text editor for the GNOME desktop/ open text_file in text editor
	gedit + text_file			=>	prompt will go to the end of line in text_file
	man ls					=>	show the session 1(user comamnd)manual of ls command 
	man 5 passwd				=>	show the session 5(file formats) manual of passwd command
	pinfo [command]needToInstallIn ubuntu	=>	show the information about the command
	info [command]				=>	show the information about the command

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Output Redirecting💭️

/*
	channel 0 - standard input
	channel 1 - standard output
	channel 2 - standard error
*/

Code!❗️

	echo "hello world!" > [text_file]		=>	it will overwrite the contents of text_file
	echo "kaungkhantzaw" >> [text_file]		=>	it will add into the contents of text_file
	ls > [text_file]				=>	list of directory will add to text_file
	ls / 2> [text_file]				=>	output will show in console and error is added to text_file
	lss 2> [text_file]				=>	wrong command makes no output in console but erros are in the [text_file]

pipe ( | )💭️

Code!❗️

	ls -la | head -n 10 > [text_file]		=>	get the list first / take first 10 lines of the list / and put into text_file
	ls -la | tail --lines 10 > ~/Desktop/MK/text	=>	last 10 lines of lists into text file in Desktop
	ls -t | head -n 10 > [text_file]		=>	newest first 10 files into text_file

T (tee)💭️	// read from standard input and write to standard output and files

Code!❗️

	ls -la | tee ~/Desktop/MK/text | less		=>	put lists into text file and run less command
	ls -la | head -n 10 | tee ~/Desktop/MK/text	=>	prompt first 10 lines of lists and put into text file
	ls -la | tee ~/Desktop/MK/text | head -n 10 	=>`	put all lists into text file and prompt only first 10 lines of lists

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Basic Vim Texteditor💭️

	Three modes ->	insert -------> command --------> visual 

insert mode 💭️

	i	=>	insert mode

command mode💭️
	:q	=> quit (not save)
	:wq	=> save and quit
	:q!	=> force quit (not save)

visual mode💭️
	v       =>	visual
	ctrl+v  =>	visual block
	shift+v =>	visual line	

	y 	=>	yank (copy)
	p	=>	paste (to paste go to command mode first)

Code!❗️

	ls -la | tee -a ~/Desktop/text	=>	append the list into text file 

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Managing local users and groups💭️

/*
	There are three users.
	1. root (super user)
	2. normal user 
	3. system user (cannot login and access)
*/

Code!❗️

	id						=> show the current user id
	ps au					=> show all the process
	cat /etc/passwd 		=> show all the users (every line is a user )
	cat /etc/passwd | wc -l	=> the amount of users (lines)

	There are two groups.
	1. Sytem group
	2. normal group 

	In normal group,there are two types
		1. primary group (group name is the same as the user name)
		2. supplementary group (we can add,create ,delete group)

Code!❗️

	cat /etc/group			=> show all the groups
	cat /etc/group | wc -l
	su -				=> enter root account (pass - markyaing)
	su --				=> go direct to (root/home/kokg)
	cat /etc/shadow		=> show all the user's encrypted passwords

	tail -n -5 /etc/passwd 	=> show the last 5 lines of users
	kokg:x:1000:1000:kaungkhantzaw:/home/kokg:/bin/bash

	kokg -> username
	x -> password (its encrypted file is located in /etc/shadow )
	1000 -> UID (user id)
	1000 -> group id (system doesn't know the name , they only know the id)
	kaungkhantzaw -> description (label)
	home/kokg -> user home directory
	bin/bash -> bash shell
	
	Try in CentOs!
	sudo cat /etc/sudoers		=> # Allow members of group sudo to execute any command
					   				%sudo[group] ALL[can use terminal]=(ALL:ALL)[all users can run] ALL[command]

Code!❗️

	su - 						=> enter root user first
	(In root user now)
	( [-c] is comment )

	cd /home/					=> enter home directory
	useradd [user_name]			=> adding user into home directory // kaungkhantzaw:x:1002:1002::/home/kaungkhantzaw:/bin/sh (no comment)
	tail -n 5 /etc/passwd 		=> prompt the last 10  users 		
	useradd -c "mk" markyaing	=> adding user markyaing and its comment(mk) // တခါတည်း comment ကိုပါထည့်တာ
	usermod -c "mk" markyaing	=> modifying user infos that is adding comment to markyaing  //နောက်မှ modify လုပ်တာ

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Creating primary groups💭️

Code!❗️

	[-g] -> force use GROUP as new primary group 
	usermod -g markyaing kkz	=> forcing markyaing group as a new primary group to a kkz user 
	usermod -g kkz markyaing 	=> forcing kkz group as a new primary group to a markyaing user

	Creating supplementary groups and adding users 💭️

Code!❗️ ( Changing user home directory )

	mkdir newhome								=> creating new directory
	usermod -d "/home/newhome/koko" koko 		=> changing user "koko" home directory to newhome
	 
Code!❗️

	groupadd nickname[group_name]			=> creating new group called "nickname" 
	tail -2 /etc/group						=> prompt last two groups
	usermod -G nickname markyaing			=> adding markyaing(user) into "nickname"(group) //markyaing can only have in this nickname group
	usermod -aG realname markyaing			=> appending markyaing into "realname" using [-aG] option
	
	su - markyaing							=> enter markyaing account from root
	usermod -s /sbin/nologin markyaing		=> [-s]user login shell is nologin so even root can't access markyaing account
	after using nologin, you cant access to user account(markyaing)
	usermod -s /bin/bash					=> bash sehll can use.	
	
	usermod -L markyaing					=> lock markyaing account (only root can access the account)
	usermod -U markyaing					=> unlock markyaing account 
	userdel -r markyaing					=> remove markyaing account ( [-r] removes home directory and all documentation)

	groupmod --help							
	groupmod -g 4000 realname 				=> changing group id of realname group
	groupadd kkz							=> if u add new group after changing gp id,kkz group id is 4001.
	groupmod -n last_gpname first_gpname	=> changing group name of first_gpname to last_gpname (user name can't be changed!)
	groupdel real_name						=> deleting real_name group


/*
	super user [id = 0]
	normal user [id = (100 - 200)red hat, (201 - 999)non red hat ] 
	system user [id = 1000 - 6000]
	System group [100 - 999]
	Normal group [1000 - 60000]

	# Min/max values for automatic uid selection in useradd
	#
	UID_MIN			 1000
	UID_MAX			60000
	# System accounts
	#SYS_UID_MIN		  100
	#SYS_UID_MAX		  999

	#
	# Min/max values for automatic gid selection in groupadd
	#
	GID_MIN			 1000
	GID_MAX			60000
	# System accounts
	#SYS_GID_MIN		  100
	#SYS_GID_MAX		  999
*/

	groupadd -r burmese_hacker 				=> adding system group ( [-r] creates system account)  //burmeseHacker:x:998:
	groupmod -g 2000 burmese_hacker			=> changing system group with id larger than 999 makes normal group //burmeseHacker:x:2000:
	cat /etc/login.defs						=> you can check the ids values of groupadd and useradd in /etc/login.defs

AgingControl💭️💭️💭️

	tail -n -10 /etc/shadow					=> show encrypted passwords of users account
	/*
		(kokg:$6$c.ZZny/C4D3FdU.T$qF42cLVlQyxnbcSXtHfBnIYiXAHDDAPLmzoa7I3oHQFCc1GyXYb60TfAUbYmh4sYsUwIO3PFP7a0lWpj3k2ya0:19051:0:99999:7:::)
	*/
	
	
⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️
	
File permission  💭️💭️💭️

read (r)= 4
write (w) = 2
excute (x) = 1 
	
d(directory) rwx(user owner) rwx(group user) r-x(other user)  3 kokg kokg   4096 Apr  6 17:02  dir1/
-(file) rw-(no execute for user owner) rw-(no execute for group user) r--(no write,no execute for other users)  1 kokg kokg 479100 Apr  2 23:26  myCV.pdf
	
code!

chmod 										=> change file mode 
chmod o+w dir1/								=> o (other) , + (adding) , w (write) / adding write permission to other users in dir1
chmod o-w dir1/								=> o (other) , - (remove) , w (write) / removing write permission from other users in dir1
chmod +r dir1/ (or) chmod a+r dir1/			=> +r (add read permission to all in dir1)
chmod -r dir1/ (or) chmod a-r dir1/			=> -r (remove read permission from all in dir1)
chmod u+w dir1/								=> u+w (add user write permission)	
chmod g+x dir1/								=> g+x (add group execute permission)

recursive 💭️💭️💭️

chmod -R a+rwX dir1/						=> change all files and directory in dir1 into read,write,execute permission  
											=> (a+rwX) X means only folders will have execute permission, files won't!
chmod -R a+rwx dir1/						=> (a+rwx) x means all folers and files will have execute permission.
chmod -R a-rwx dir1/ ❌️						=> you cant remove file permission using recursive 

chmod u-x dir1; chmod g-r dir1; chmod o-w dir1		=> changing dir1 permission to (drw--wxr-x)
chmod 635 dir1										=> changing dir1 permission using numbers 

change file owner and group ownership 💭️💭️💭️

cd dir1/dir2/								=> enter into dir2 first						
sudo chown markyaing test					=> gain root access and change ownership of test file from kokg to markyaing
sudo chown markyaing:markyaing test			=> changing owner and group 
sudo chown :root test						=> changing only group owner to root 
sudo chgrp markyaing test						=> change group ownership of test from kokg to markyaing 

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️


Managing default permissions and special access 💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️

Special permissions 

1. SetUID(4) 	s  //file  	
2. SetGID(2)	s  //directory
3. Sticky(1)	t  //directory

-rwS-r-xr-x (S means that it has no execute only SetUID)
-rws-r-xr-x (small s means that has both execute and SetUID)

eg.
-rwsr-xr-x 1 root root 68208 Jul 15  2021 /usr/bin/passwd*

SetUID 💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️

special permission SetUID means that system only knows that file only run in root.
Without SetUID,if owner run the file,system recoginze it as a owner and it group runs the file,it will recognize it as a group and so the others.

SetGID 💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️

When you create a file in a directory from user called mk,it will create a mk user id and mk group.
But if you use SetGID,you will get parent group only.If parent group is root,that created file's group is also root.
If parent group is kokg,that created file's group will be kokg even though markyaing user created it.

sudo chmod g+s dir1		=> drwxrwsrwx  2 root root   4096 Apr  7 17:20  dir1  (rws is read,write,execute,SetGID)
cd dir1					=> goes to dir1 folder
touch file1				=> create file1
ls -la					=> -rw-rw-r-- 1 kokg root    0 Apr  7 17:20 flex1  (group is in root now)

Or may be you didnt SetGID in parent directory, you can also do that

sudo chgrp root *		=> change all files group into root 

Sticky 💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️💭️

Sticky makes inner files not to be deleted by others user.

useradd markyaing				=> creating user markyaing
sudo passwd markyaing			=> adding password
su markyaing					=> login markyaing
rm dir1/file1					=> deleting file1 created by kokg user and it will be deleted because there is not sticky

To avoid that, put sticky in parent directory 

sudo chmod o+t dir1/			=> o+t (adding sticky to other users) # drwxrwxrwt  2 root root   4096 Apr  8 12:00  dir1
su markyaing 					=> goes to another user
rm dir1/file1					=> deleting file1 but now it won't be deleted because of sticky


Or You can also use like this! 💭️💭️💭️💭️💭️💭️💭️💭️💭️

chmod 1777 dir1 				=> all permission and sticky,/ special permission is 1
chmod 3777 dir1					=> all permission and SetGID,sticly / special permission is 3(1+2)

default permission   💭️💭️💭️💭️💭️💭️💭️💭️💭️  (Red hat only , CentOS only)

Default permissions are defined using umask.

-rw-rw-r-- 1 kokg kokg    0 Apr  8 14:58 file1
-rw-r--r-- 1 root kokg    0 Apr  8 15:01 file2
drwxrwsr-x 2 kokg kokg 4096 Apr  8 14:58 folder1
drwxr-sr-x 2 root kokg 4096 Apr  8 15:01 folder2

#file1 = 664
#file2 = 644 (root)
#folder1 = 775
#folder2 = 755 (root)

umask in kokg user = 0002
umask in root user = 0022

default permission = full permission - umask

#file1 = 666-002 = 664 (there is no need execute permission for file, that's why its full permission is 666)
#file2 = 666-022 = 644 (root umask)
#folder1 = 777-002 = 775 (kokg umask)
#folder2 = 777-022 = 755 (root umask)

If you change umask,file permission will also change.
You can change umask of user.

cd ~					=> goes to home directory 
ls -la					=> check there is .bashrc file
vim .bashrc				=> vim it
umask 0001				=> change umask under the program
:wq						=> save and quit
close the terminal.
open again 
umask					=> now it changed! 

⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️⛔️

Process 💭️💭️💭️

ps  					=> show the current processes but later processes are not included
ps au 					=> show all process in userlist

Process state 

runnable (ready) 		=> ready to run ,on CPU and almost to running 
running					=> both user and kernel are running 
stopped					=> suspend or resume, 
sleeping				=> 
zombie					=> 

ps aux 					 
ps aux | less

top 					=> table of process (display system summary infos and a list of process or threads currently managed by kernel)

Process Control 💭️💭️💭️

foreground programs/process 		=> can be found on terminal
background programs/process			=> can't be found on terminal (need to list background programs to be found)
jobs 								=> show and list the active jobs of current terminal 


gedit								=> when open editor,you can type other commands in terminal because it is running in foreground				
ctrl+Z								=> will suspend the editor and can't edit (stopped)
jobs								=> [1]+ Stopped			gedit		(Stopped because of ctrl+Z)
fg %1								=> fg (foreground) %1 (id) / move to foreground (foreground)
bg %1								=> bg (background) %1 (id) / move to background (background) / now can type commands in terminal
jobs								=> [1]+ Running 		gedit &  (background running) / "&" means it is in background process 
gedit &								=> run as a background process (background)












